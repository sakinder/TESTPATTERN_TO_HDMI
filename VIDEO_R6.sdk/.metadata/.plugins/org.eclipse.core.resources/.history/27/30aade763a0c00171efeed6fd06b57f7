/*Copyright (c) 2016, Adam Taylor
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project*/

#include <stdio.h>
#include <xaxivdma.h>
#include <xbasic_types.h>
#include <xil_io.h>
#include <xil_printf.h>
#include <xparameters.h>
#include <xstatus.h>
#include <xv_tpg.h>
#include <xvidc.h>

#include "../HDMI_DISPLAY/zed_hdmi_display.h"
#include "../HDMI_IIC/zed_iic.h"
#include "../PLATFORM/platform.h"
#include "../SYSTEM_CONFIG_HEADER/system_config_header.h"
#include "../VIDEO_RESOLUTION/video_resolution.h"

int run_triple_frame_buffer(XAxiVdma* InstancePtr, int DeviceId, int hsize,
		int vsize, int buf_base_addr, int number_frame_count,
		int enable_frm_cnt_intr);
//0x100000
//0x200000
unsigned int srcBuffer = (XPAR_PS7_DDR_0_S_AXI_BASEADDR  + 0x100000);

u8 tpg_alpha = 0x00;
//void print(char *str);
#define ADV7511_ADDR   0x72
#define CARRIER_HDMI_OUT_CONFIG_LEN  (40)
Xuint8 carrier_hdmi_out_config[CARRIER_HDMI_OUT_CONFIG_LEN][3] =
{
	{ADV7511_ADDR>>1, 0x15, 0x01}, // Input YCbCr 4:2:2 with seperate syncs
	{ADV7511_ADDR>>1, 0x16, 0x38}, // Output format 444, Input Color Depth = 8
                                   //    R0x16[  7] = Output Video Format = 0 (444)
                                   //    R0x16[5:4] = Input Video Color Depth = 11 (8 bits/color)
                                   //    R0x16[3:2] = Input Video Style = 10 (style 1)
                                   //    R0x16[  1] = DDR Input Edge = 0 (falling edge)
                                   //    R0x16[  0] = Output Color Space = 0 (RGB)

	// HDTV YCbCr (16to235) to RGB (16to235)
	{ADV7511_ADDR>>1, 0x18, 0xAC},
	{ADV7511_ADDR>>1, 0x19, 0x53},
	{ADV7511_ADDR>>1, 0x1A, 0x08},
	{ADV7511_ADDR>>1, 0x1B, 0x00},
	{ADV7511_ADDR>>1, 0x1C, 0x00},
	{ADV7511_ADDR>>1, 0x1D, 0x00},
	{ADV7511_ADDR>>1, 0x1E, 0x19},
	{ADV7511_ADDR>>1, 0x1F, 0xD6},
	{ADV7511_ADDR>>1, 0x20, 0x1C},
	{ADV7511_ADDR>>1, 0x21, 0x56},
	{ADV7511_ADDR>>1, 0x22, 0x08},
	{ADV7511_ADDR>>1, 0x23, 0x00},
	{ADV7511_ADDR>>1, 0x24, 0x1E},
	{ADV7511_ADDR>>1, 0x25, 0x88},
	{ADV7511_ADDR>>1, 0x26, 0x02},
	{ADV7511_ADDR>>1, 0x27, 0x91},
	{ADV7511_ADDR>>1, 0x28, 0x1F},
	{ADV7511_ADDR>>1, 0x29, 0xFF},
	{ADV7511_ADDR>>1, 0x2A, 0x08},
	{ADV7511_ADDR>>1, 0x2B, 0x00},
	{ADV7511_ADDR>>1, 0x2C, 0x0E},
	{ADV7511_ADDR>>1, 0x2D, 0x85},
	{ADV7511_ADDR>>1, 0x2E, 0x18},
	{ADV7511_ADDR>>1, 0x2F, 0xBE},

	{ADV7511_ADDR>>1, 0x41, 0x10}, // Power down control
                                   //    R0x41[  6] = PowerDown = 0 (power-up)
	{ADV7511_ADDR>>1, 0x48, 0x08}, // Video Input Justification
                                   //    R0x48[8:7] = Video Input Justification = 01 (right justified)
	{ADV7511_ADDR>>1, 0x55, 0x00}, // Set RGB in AVinfo Frame
                                   //    R0x55[6:5] = Output Format = 00 (RGB)
	{ADV7511_ADDR>>1, 0x56, 0x28}, // Aspect Ratio
                                   //    R0x56[5:4] = Picture Aspect Ratio = 10 (16:9)
                                   //    R0x56[3:0] = Active Format Aspect Ratio = 1000 (Same as Aspect Ratio)
	{ADV7511_ADDR>>1, 0x98, 0x03}, // ADI Recommended Write
	{ADV7511_ADDR>>1, 0x9A, 0xE0}, // ADI Recommended Write
	{ADV7511_ADDR>>1, 0x9C, 0x30}, // PLL Filter R1 Value
	{ADV7511_ADDR>>1, 0x9D, 0x61}, // Set clock divide
	{ADV7511_ADDR>>1, 0xA2, 0xA4}, // ADI Recommended Write
	{ADV7511_ADDR>>1, 0xA3, 0xA4}, // ADI Recommended Write
	{ADV7511_ADDR>>1, 0xAF, 0x04}, // HDMI/DVI Modes
                                   //    R0xAF[  7] = HDCP Enable = 0 (HDCP disabled)
                                   //    R0xAF[  4] = Frame Encryption = 0 (Current frame NOT HDCP encrypted)
                                   //    R0xAF[3:2] = 01 (fixed)
                                   //    R0xAF[  1] = HDMI/DVI Mode Select = 0 (DVI Mode)
    //{ADV7511_ADDR>>1, 0xBA, 0x00}, // Programmable delay for input video clock = 000 = -1.2ns
	{ADV7511_ADDR>>1, 0xBA, 0x60}, // Programmable delay for input video clock = 011 = no delay
	{ADV7511_ADDR>>1, 0xE0, 0xD0}, // Must be set to 0xD0 for proper operation
	{ADV7511_ADDR>>1, 0xF9, 0x00}  // Fixed I2C Address (This should be set to a non-conflicting I2C address)
};
int pattern()
{
	int ret;
	zed_hdmi_display_t *pDemo;
	pDemo->hdmio_resolution = VIDEO_RESOLUTION_1080P;
	pDemo->hdmio_width  = 1920;
	pDemo->hdmio_height = 1080;
	ret = zed_iic_axi_init(&(pDemo->hdmi_out_iic),"ZED HDMI I2C Controller", pDemo->uBaseAddr_IIC_HdmiOut );
	if ( !ret )
		{
		return -1;
		}
	Xuint8 num_bytes;
	int i;
	for ( i = 0; i < CARRIER_HDMI_OUT_CONFIG_LEN; i++ )
	{
	num_bytes = pDemo->hdmi_out_iic.fpIicWrite( &(pDemo->hdmi_out_iic), carrier_hdmi_out_config[i][0], carrier_hdmi_out_config[i][1], &(carrier_hdmi_out_config[i][2]), 1 );
	}
	int Status;
	XV_tpg ptpg;
	XAxiVdma InstancePtr;
	XV_tpg_Config *ptpg_config;
	init_platform();
    ptpg_config = XV_tpg_LookupConfig(XPAR_PS_VIDEO_VIDEO_TPG_DEVICE_ID);
    XV_tpg_CfgInitialize(&ptpg, ptpg_config, ptpg_config->BaseAddress);
	printf("TPG Initialization\r\n");
	u32 height,width,status;
	status = XV_tpg_IsReady(&ptpg);
	printf("Status %u \n\r", (unsigned int) status);
	status = XV_tpg_IsIdle(&ptpg);
	printf("Status %u \n\r", (unsigned int) status);
	XV_tpg_Set_height(&ptpg, (u32)SCREEN_HEIGHT);
	XV_tpg_Set_width(&ptpg, (u32)SCREEN_WIDTH);
	height = XV_tpg_Get_height(&ptpg);
	width = XV_tpg_Get_width(&ptpg);
	XV_tpg_Set_colorFormat(&ptpg,XVIDC_CSF_RGB);
	XV_tpg_Set_maskId(&ptpg, 0x0);
	XV_tpg_Set_motionSpeed(&ptpg, 0x4);
	printf("info from tpg %u %u \n\r", (unsigned int)height, (unsigned int)width);
	XV_tpg_Set_bckgndId(&ptpg, XTPG_BKGND_COLOR_BARS);
	status = XV_tpg_Get_bckgndId(&ptpg);
	printf("Status %x \n\r", (unsigned int) status);
	XV_tpg_EnableAutoRestart(&ptpg);
	XV_tpg_Start(&ptpg);
	status = XV_tpg_IsIdle(&ptpg);
	printf("Status %u \n\r", (unsigned int) status);
	/* Calling the API to configure and start VDMA without frame counter interrupt */
	Status = run_triple_frame_buffer(&InstancePtr, 0, SCREEN_WIDTH, SCREEN_HEIGHT,srcBuffer, 100, 0);
	if (Status != XST_SUCCESS) {
		xil_printf("Transfer of frames failed with error = %d\r\n",Status);
		return XST_FAILURE;
	} else {
		xil_printf("Transfer of frames started \r\n");
	}

	u32 vdma_stat;
	vdma_stat = Xil_In32(0x43000000);
	printf("MM2S vdma cntrl %x\n\r",(unsigned) vdma_stat);
	vdma_stat = Xil_In32(0x43000004);
	printf("MM2S vdma stat %x\n\r",(unsigned) vdma_stat);
	vdma_stat = Xil_In32(0x43000030);
	printf("S2MM vdma cntrl %x\n\r",(unsigned) vdma_stat);
	vdma_stat = Xil_In32(0x43000034);
	printf("S2MM vdma stat %x\n\r",(unsigned) vdma_stat);
	vdma_stat = Xil_In32(0x43000028);
	printf("Pointers %x\n\r",(unsigned) vdma_stat);

	vdma_stat = Xil_In32(0x4300005c);
	printf("MM2S addr 1 %x\n\r",(unsigned) vdma_stat);
	vdma_stat = Xil_In32(0x43000060);
	printf("MM2S addr 2 %x\n\r",(unsigned) vdma_stat);
	vdma_stat = Xil_In32(0x43000064);
	printf("MM2S addr 3 %x\n\r",(unsigned) vdma_stat);

	vdma_stat = Xil_In32(0x4300005c);
	printf("S2MM addr 1 %x\n\r",(unsigned) vdma_stat);
	vdma_stat = Xil_In32(0x43000060);
	printf("S2MM addr 2 %x\n\r",(unsigned) vdma_stat);
	vdma_stat = Xil_In32(0x43000064);
	printf("S2MM addr 3 %x\n\r",(unsigned) vdma_stat);
	//readout first three lines from store 0

		u32 address = 0x200000;

		u8  pixel1, pixel2, pixel3;
		u32 pixel;
		for(i=0;i<2400;i++){
			pixel1 = Xil_In8(address);
			pixel2 = Xil_In8(address+1);
			pixel3 = Xil_In8(address+2);
			pixel = (pixel3<<16)|(pixel2<<8)|(pixel1);
			printf(" %x\n",(unsigned) pixel);
			address = address + 3;
		}


    cleanup_platform();
    return 0;
}
