//working condition:r1

#include "zed_hdmi_display.h"

#include <sleep.h>
#include <stdio.h>
#include <xil_cache.h>
#include <xil_printf.h>
#include <xparameters.h>
#include <xv_tpg.h>
#include <xvidc.h>


#include "../UART/uartio.h"
#include "../VIDEO_FRAME_BUFFER/video_frame_buffer.h"
#include "../VIDEO_GENERATOR/video_generator.h"
#include "../VIDEO_RESOLUTION/video_resolution.h"

#define SCREEN_WIDTH 1920
#define SCREEN_HEIGHT 1080
#define ADV7511_ADDR   0x72
#define CARRIER_HDMI_OUT_CONFIG_LEN  (40)
Xuint8 carrier_hdmi_out_config[CARRIER_HDMI_OUT_CONFIG_LEN][3] =
{
	{ADV7511_ADDR>>1, 0x15, 0x01},
	{ADV7511_ADDR>>1, 0x16, 0x38},
	{ADV7511_ADDR>>1, 0x18, 0xAC},
	{ADV7511_ADDR>>1, 0x19, 0x53},
	{ADV7511_ADDR>>1, 0x1A, 0x08},
	{ADV7511_ADDR>>1, 0x1B, 0x00},
	{ADV7511_ADDR>>1, 0x1C, 0x00},
	{ADV7511_ADDR>>1, 0x1D, 0x00},
	{ADV7511_ADDR>>1, 0x1E, 0x19},
	{ADV7511_ADDR>>1, 0x1F, 0xD6},
	{ADV7511_ADDR>>1, 0x20, 0x1C},
	{ADV7511_ADDR>>1, 0x21, 0x56},
	{ADV7511_ADDR>>1, 0x22, 0x08},
	{ADV7511_ADDR>>1, 0x23, 0x00},
	{ADV7511_ADDR>>1, 0x24, 0x1E},
	{ADV7511_ADDR>>1, 0x25, 0x88},
	{ADV7511_ADDR>>1, 0x26, 0x02},
	{ADV7511_ADDR>>1, 0x27, 0x91},
	{ADV7511_ADDR>>1, 0x28, 0x1F},
	{ADV7511_ADDR>>1, 0x29, 0xFF},
	{ADV7511_ADDR>>1, 0x2A, 0x08},
	{ADV7511_ADDR>>1, 0x2B, 0x00},
	{ADV7511_ADDR>>1, 0x2C, 0x0E},
	{ADV7511_ADDR>>1, 0x2D, 0x85},
	{ADV7511_ADDR>>1, 0x2E, 0x18},
	{ADV7511_ADDR>>1, 0x2F, 0xBE},
	{ADV7511_ADDR>>1, 0x41, 0x10},
	{ADV7511_ADDR>>1, 0x48, 0x08},
	{ADV7511_ADDR>>1, 0x55, 0x00},
	{ADV7511_ADDR>>1, 0x56, 0x28},
	{ADV7511_ADDR>>1, 0x98, 0x03},
	{ADV7511_ADDR>>1, 0x9A, 0xE0},
	{ADV7511_ADDR>>1, 0x9C, 0x30},
	{ADV7511_ADDR>>1, 0x9D, 0x61},
	{ADV7511_ADDR>>1, 0xA2, 0xA4},
	{ADV7511_ADDR>>1, 0xA3, 0xA4},
	{ADV7511_ADDR>>1, 0xAF, 0x04},
	{ADV7511_ADDR>>1, 0xBA, 0x60},
	{ADV7511_ADDR>>1, 0xE0, 0xD0},
	{ADV7511_ADDR>>1, 0xF9, 0x00}
};

int zed_hdmi_display_init( zed_hdmi_display_t *pDemo )
{
	int ret;
	u32 height,width,status;
	u32 uart_quit;
	XV_tpg ptpg;
	XV_tpg_Config *ptpg_config;
	ptpg_config = XV_tpg_LookupConfig(XPAR_PS_VIDEO_VIDEO_TPG_DEVICE_ID);
	XV_tpg_CfgInitialize(&ptpg, ptpg_config, ptpg_config->BaseAddress);
	XV_tpg_IsReady(&ptpg);
	XV_tpg_IsIdle(&ptpg);
	XV_tpg_Set_height(&ptpg, (u32)SCREEN_HEIGHT);
	XV_tpg_Set_width(&ptpg, (u32)SCREEN_WIDTH);
	height = XV_tpg_Get_height(&ptpg);
	width = XV_tpg_Get_width(&ptpg);
	XV_tpg_Set_colorFormat(&ptpg,XVIDC_CSF_RGB);
	XV_tpg_Set_maskId(&ptpg, 0x0);
	XV_tpg_Set_motionSpeed(&ptpg, 0x4);

	XV_tpg_Set_bckgndId(&ptpg, XTPG_BKGND_CHECKER_BOARD);
	status = XV_tpg_Get_bckgndId(&ptpg);

	XV_tpg_EnableAutoRestart(&ptpg);
	XV_tpg_Start(&ptpg);
	XV_tpg_IsIdle(&ptpg);
	pDemo->hdmio_resolution = VIDEO_RESOLUTION_1080P;
	pDemo->hdmio_width  = 1920;
	pDemo->hdmio_height = 1080;
	xil_printf( "HDMI IIC Initialization ...\n\r" );
	ret = zed_iic_axi_init(&(pDemo->hdmi_out_iic),"ZED HDMI I2C Controller", pDemo->uBaseAddr_IIC_HdmiOut );
	if ( !ret )
	{
	xil_printf( "ERROR : Failed to initialize IIC driver\n\r" );
	return -1;
	}
	xil_printf( "HDMI Output Initialization ...\n\r" );
	{
	Xuint8 num_bytes;
	int i;
	for ( i = 0; i < CARRIER_HDMI_OUT_CONFIG_LEN; i++ )
	{
	//xil_printf( "[ZedBoard HDMI] IIC Write - Device = 0x%02X, Address = 0x%02X, Data = 0x%02X\n\r", carrier_hdmi_out_config[i][0]<<1, carrier_hdmi_out_config[i][1], carrier_hdmi_out_config[i][2] );
	num_bytes = pDemo->hdmi_out_iic.fpIicWrite( &(pDemo->hdmi_out_iic), carrier_hdmi_out_config[i][0], carrier_hdmi_out_config[i][1], &(carrier_hdmi_out_config[i][2]), 1 );
	}
	}
	xil_printf( "Clear Frame Buffer\n\r" );
	zed_hdmi_display_clear( pDemo );

	xil_printf( "Video DMA (Output Side) Initialization ...\n\r" );
	vfb_common_init(
	pDemo->uDeviceId_VDMA_HdmiDisplay,     // uDeviceId
	&(pDemo->vdma_hdmi)                    // pAxiVdma
	);
	vfb_tx_init(
	&(pDemo->vdma_hdmi),                   // pAxiVdma
	&(pDemo->vdmacfg_hdmi_read),           // pReadCfg
	pDemo->hdmio_resolution,               // uVideoResolution
	pDemo->hdmio_resolution,               // uStorageResolution
	pDemo->uBaseAddr_MEM_HdmiDisplay,      // uMemAddr
	pDemo->uNumFrames_HdmiDisplay          // uNumFrames
	);
	xil_printf( "Video Timing Controller (generator) Initialization ...\n\r" );
	vgen_init( &(pDemo->vtc_hdmio_generator), pDemo->uDeviceId_VTC_HdmioGenerator );
	vgen_config( &(pDemo->vtc_hdmio_generator), pDemo->hdmio_resolution, 1 );
	while (1)
	{

	xil_printf( "\n\rPress ENTER to re-start ...\n\r" );

	uart_quit = uart_prompt_io();


	vfb_tx_stop( &(pDemo->vdma_hdmi) );
	hdmi_display();
	vfb_tx_start( &(pDemo->vdma_hdmi) );
	xil_printf( "HDMI Output Re-Initialization ...\n\r" );
	{
	Xuint8 num_bytes;
	int i;
	for ( i = 0; i < CARRIER_HDMI_OUT_CONFIG_LEN; i++ )
	{
	num_bytes = pDemo->hdmi_out_iic.fpIicWrite( &(pDemo->hdmi_out_iic), carrier_hdmi_out_config[i][0], carrier_hdmi_out_config[i][1], &(carrier_hdmi_out_config[i][2]), 1 );
	}
	}

	xil_printf("\n\r");
	xil_printf( "Done\n\r" );
	xil_printf("\n\r");
	}
	return 0;
}

int zed_hdmi_display_clear( zed_hdmi_display_t *pDemo )
{
	xil_printf( "Video Frame Buffer Initialization ...\n\r" );
	Xuint32 frame, row, col;
	Xuint32 pixel;
	volatile Xuint32 *pStorageMem = (Xuint32 *)pDemo->uBaseAddr_MEM_HdmiDisplay;
	for ( frame = 0; frame < pDemo->uNumFrames_HdmiDisplay; frame++ )
	{
      for ( row = 0; row < pDemo->hdmio_height; row++ )
      {
         for ( col = 0; col < pDemo->hdmio_width; col++ )
         {
            pixel = 0x00000000;
            *pStorageMem++ = pixel;
         }
      }
   }
}
int hdmi_display()
{
	XAxiVdma InstancePtr;
	run_triple_frame_buffer(&InstancePtr, 0, 1920, 1080,(XPAR_PS7_DDR_0_S_AXI_BASEADDR  + 0x100000), 100, 0);
	Xil_DCacheFlush();
   return 0;
}
